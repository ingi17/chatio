{"version":3,"sources":["components/Sidebar.js","containers/Sidebar.js","components/Message.js","components/MessagesList.js","containers/MessagesList.js","components/AddMessage.js","actions/index.js","containers/AddMessage.js","constants/ActionTypes.js","App.js","registerServiceWorker.js","reducers/messages.js","reducers/users.js","reducers/index.js","sagas/index.js","sockets/index.js","utils/name.js","index.js"],"names":["Sidebar","_ref","users","react_default","a","createElement","id","className","map","user","key","name","connect","state","SidebarComponent","Message","message","author","MessagesList","messages","components_Message","Object","assign","MessagesListComponent","AddMessage","props","input","onKeyPress","e","dispatch","value","type","ref","node","nextMessageId","addMessage","AddMessageComponent","App","containers_Sidebar_Sidebar","containers_MessagesList_MessagesList","containers_AddMessage_AddMessage","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","arguments","length","undefined","action","concat","chat","combineReducers","handleNewMessage","regenerator_default","mark","params","wrap","_context","prev","next","takeEvery","username","socket","send","JSON","stringify","stop","setupSocket","WebSocket","onopen","onmessage","event","data","parse","chance","Chance","first","sagaMiddleware","createSagaMiddleware","store","createStore","reducers","applyMiddleware","run","ReactDOM","render","es","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e6bd3d7d.chunk.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst Sidebar = ({ users }) => (\n  <aside id=\"sidebar\" className=\"sidebar\">\n    <ul>\n      {users.map(user => (\n        <li key={user.id}>{user.name}</li>\n      ))}\n    </ul>\n  </aside>\n)\n\nSidebar.propTypes = {\n  users: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired\n}\n\nexport default Sidebar\n","import { connect } from 'react-redux'\nimport SidebarComponent from '../components/Sidebar'\n\nexport const Sidebar = connect(state => ({\n  users: state.users\n}), {})(SidebarComponent)\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst Message = ({ message, author }) => (\n  <p>\n    <i>{author}</i>: {message}\n  </p>\n)\n\nMessage.propTypes = {\n  message: PropTypes.string.isRequired,\n  author: PropTypes.string.isRequired\n}\n\nexport default Message\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Message from \"./Message\"\n\nconst MessagesList = ({ messages }) => (\n  <section id=\"messages-list\">\n    <ul>\n    {messages.map(message => (\n      <Message\n      key={message.id}\n      {...message}\n      />\n    ))}\n    </ul>\n  </section>\n)\n\nMessagesList.propTypes = {\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      message: PropTypes.string.isRequired,\n      author: PropTypes.string.isRequired\n    }).isRequired\n  ).isRequired\n}\n\nexport default MessagesList\n","\nimport { connect } from 'react-redux'\nimport MessagesListComponent from '../components/MessagesList'\n\nexport const MessagesList = connect(state => ({\n  messages: state.messages\n}), {})(MessagesListComponent)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst AddMessage = (props) => {\n  let input\n\n  return (\n    <section id=\"new-message\">\n      <input\n        onKeyPress={(e) => {\n        if (e.key === 'Enter') {\n          props.dispatch(input.value, 'Me')\n          input.value = ''\n        }\n      }}\n        type=\"text\"\n        ref={(node) => {\n        input = node\n      }}\n      />\n    </section>\n  )\n}\n\nAddMessage.propTypes = {\n  dispatch: PropTypes.func.isRequired\n}\n\nexport default AddMessage\n","import * as types from '../constants/ActionTypes'\n\nlet nextMessageId = 0\nconst nextUserId = 0\n\nexport const addMessage = (message, author) => ({\n  type: types.ADD_MESSAGE,\n  id: nextMessageId++,\n  message,\n  author\n})\n\nexport const addUser = name => ({\n  type: types.ADD_USER,\n  id: nextUserId + 1,\n  name\n})\n\nexport const messageReceived = (message, author) => ({\n  type: types.MESSAGE_RECEIVED,\n  id: nextMessageId++,\n  message,\n  author\n})\n\nexport const populateUsersList = users => ({\n  type: types.USERS_LIST,\n  users\n})\n\n","import { connect } from 'react-redux'\nimport AddMessageComponent from '../components/AddMessage'\nimport { addMessage } from '../actions'\n\nconst mapDispatchToProps = dispatch => ({\n  dispatch: (message, author) => {\n    dispatch(addMessage(message, author))\n  }\n})\n\nexport const AddMessage = connect(() => ({}), mapDispatchToProps)(AddMessageComponent)\n","export const ADD_MESSAGE = 'ADD_MESSAGE'\nexport const MESSAGE_RECEIVED = 'MESSAGE_RECEIVED'\nexport const ADD_USER = 'ADD_USER'\nexport const USERS_LIST = 'USERS_LIST'\n","import React from 'react'\nimport './App.css'\nimport { Sidebar } from './containers/Sidebar'\nimport { MessagesList } from './containers/MessagesList'\nimport { AddMessage } from './containers/AddMessage'\n\nconst App = () => (\n  <div id=\"container\">\n    <Sidebar />\n    <section id=\"main\">\n      <MessagesList />\n      <AddMessage />\n    </section>\n  </div>\n)\n\nexport default App","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (!isLocalhost) {\n          // Is not local host. Just register service worker\n          registerValidSW(swUrl);\n        } else {\n          // This is running on localhost. Lets check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type').indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","\nconst messages = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD_MESSAGE':\n    case 'MESSAGE_RECEIVED':\n      return state.concat([\n        {\n          message: action.message,\n          author: action.author,\n          id: action.id\n        }\n      ])\n    default:\n      return state\n  }\n}\n\nexport default messages\n","\nimport * as types from '../constants/ActionTypes'\n\nconst users = (state = [], action) => {\n  switch (action.type) {\n    case types.ADD_USER:\n      return state.concat([{ name: action.name, id: action.id }])\n    case types.USERS_LIST:\n      return action.users\n    default:\n      return state\n  }\n}\n\nexport default users\n","import { combineReducers } from \"redux\"\nimport messages from \"./messages\"\nimport users from \"./users\"\n\nconst chat = combineReducers({\n  messages,\n  users\n});\n\nexport default chat\n","import { takeEvery } from 'redux-saga/effects'\nimport * as types from '../constants/ActionTypes'\n\nconst handleNewMessage = function* handleNewMessage(params) {\n  yield takeEvery(types.ADD_MESSAGE, (action) => {\n    action.author = params.username\n    params.socket.send(JSON.stringify(action))\n  })\n}\n\nexport default handleNewMessage\n","import * as types from '../constants/ActionTypes'\nimport { messageReceived, populateUsersList } from '../actions'\n\nconst setupSocket = (dispatch, username) => {\n  const socket = new WebSocket('ws://localhost:8989')\n\n  socket.onopen = () => {\n    socket.send(JSON.stringify({\n      type: types.ADD_USER,\n      name: username\n    }))\n  }\n  socket.onmessage = (event) => {\n    const data = JSON.parse(event.data)\n    switch (data.type) {\n      case types.ADD_MESSAGE:\n        dispatch(messageReceived(data.message, data.author))\n        break\n      case types.USERS_LIST:\n        dispatch(populateUsersList(data.users))\n        break\n      default:\n        break\n    }\n  }\n\n  return socket\n}\n\nexport default setupSocket","import Chance from 'chance'\n\nconst chance = new Chance()\nexport default chance.first()","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\n\nimport './index.css'\nimport App from './App'\nimport registerServiceWorker from './registerServiceWorker'\nimport reducers from './reducers'\nimport handleNewMessage from './sagas'\nimport setupSocket from './sockets'\nimport username from './utils/name'\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = createStore(\n  reducers,\n  applyMiddleware(sagaMiddleware)\n)\n\nconst socket = setupSocket(store.dispatch, username)\n\nsagaMiddleware.run(handleNewMessage, { socket, username })\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\nregisterServiceWorker()"],"sourceRoot":""}